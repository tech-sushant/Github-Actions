name: "Release New Version"

on:
  workflow_dispatch:
    inputs:
      release_title:
        description: 'Title for the release'
        required: true
      release_body:
        description: 'Additional notes (optional)'
        required: false
        default: ''

permissions:
  contents: write
  pull-requests: read

jobs:
  publish:
    name: "Publish to NPM and Create Release"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout source code"
        uses: actions/checkout@v2

      - name: "Set up Node.js"
        uses: actions/setup-node@v3
        with:
          node-version: 22.x
          registry-url: "https://registry.npmjs.org/"

      - name: "Install dependencies"
        run: npm ci

      - name: "Build project"
        run: npm run build

      - name: "Get current version from package.json"
        id: get_version
        run: |
          VERSION="v$(node -p 'require(\"./package.json\").version')"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: "Get previous tag"
        id: previous_tag
        run: |
          PREV_TAG=$(git tag --sort=-creatordate | grep -E '^v' | grep -v ${{ steps.get_version.outputs.version }} | head -n 1)
          echo "previous_tag=$PREV_TAG" >> $GITHUB_OUTPUT

      - name: "Get merged PRs between tags"
        id: changelog
        run: |
          PRS=$(gh pr list --state merged --search "base:main" --json title,mergeCommit --jq '
            map(select(.mergeCommit.oid != null)) |
            map("- " + .title)' || echo "")

          if [ -z "$PRS" ]; then
            echo "prs=No pull requests were merged for this release." >> $GITHUB_OUTPUT
          else
            echo "prs=$PRS" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Set Git user"
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: "Create and push tag"
        run: |
          git tag ${{ steps.get_version.outputs.version }}
          git push origin ${{ steps.get_version.outputs.version }}

      - name: "Publish to NPM"
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: "Create GitHub Release"
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: ${{ github.event.inputs.release_title }}
          body: |
            ${{ steps.changelog.outputs.prs }}

            ${{ github.event.inputs.release_body }}

            Published by ${{ github.actor }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
