name: "Release New Version"

on:
  workflow_dispatch:
    inputs:
      release_title:
        description: "Title for the release"
        required: true
      release_body:
        description: "Additional notes (optional)"
        required: false
        default: ""

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22.x
          registry-url: "https://registry.npmjs.org/"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Get current version from package.json
        id: get_version
        run: |
          VERSION="v$(node -p 'require("./package.json").version')"
          echo "version=$VERSION" >> $GITHUB_OUTPUT


      - name: Get previous Git tag
        id: get_previous_tag
        run: |
          PREV_TAG=$(git tag --sort=-creatordate | grep '^v' | grep -v "${{ steps.get_version.outputs.version }}" | head -n 1)
          echo "previous_tag=$PREV_TAG" >> $GITHUB_OUTPUT

      - name: Fetch and categorize merged PRs
        id: fetch_prs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          PREVIOUS_TAG=${{ steps.get_previous_tag.outputs.previous_tag }}
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "pr_list=No previous tag found to compare PRs." >> $GITHUB_OUTPUT
            exit 0
          fi

          PREVIOUS_SHA=$(git rev-list -n 1 $PREVIOUS_TAG)
          PREVIOUS_DATE=$(git show -s --format=%cI $PREVIOUS_SHA)
          CURRENT_DATE=$(git show -s --format=%cI HEAD)

          echo "üîç Fetching PRs merged between:"
          echo "   PREVIOUS_DATE: $PREVIOUS_DATE"
          echo "   CURRENT_DATE:  $CURRENT_DATE"

          PRS=$(gh pr list --state merged --search "merged:${PREVIOUS_DATE}..${CURRENT_DATE}" \
            --json number,title,url \
            --jq '.[] | "- [#\(.number)](\(.url)) \(.title)"')

          echo ""
          echo "üîé All Fetched PRs:"
          echo "$PRS"

          ADDED=""
          FIXED=""

          while IFS= read -r pr; do
            title=$(echo "$pr" | sed 's/.*] //')
            if echo "$title" | grep -Eqi '^fix:'; then
              FIXED+="$pr"$'\n'
            elif echo "$title" | grep -Eqi '^feat:'; then
              ADDED+="$pr"$'\n'
            fi
          done <<< "$PRS"

          BODY=""
          if [ -n "$ADDED" ]; then
            BODY+="### Added"$'\n'"$ADDED"
          fi
          if [ -n "$FIXED" ]; then
            BODY+=$'\n'"### Fixed"$'\n'"$FIXED"
          fi
          if [ -z "$BODY" ]; then
            BODY="No categorized pull requests found."
          fi

          echo ""
          echo "‚úÖ Categorized PRs:"
          echo "$BODY"

          echo "pr_list<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT


      - name: Set Git identity
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Create Git tag
        run: git tag ${{ steps.get_version.outputs.version }}

      - name: Push Git tag
        run: git push origin ${{ steps.get_version.outputs.version }}

      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: ${{ github.event.inputs.release_title }}
          body: |
            ${{ github.event.inputs.release_body }}

            ${{ steps.fetch_prs.outputs.pr_list }}

            Published by ${{ github.actor }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
