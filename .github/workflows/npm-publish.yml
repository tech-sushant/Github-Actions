name: "Release New Version"

on:
  workflow_dispatch:
    inputs:
      release_title:
        description: 'Title for the release'
        required: true
      release_body:
        description: 'Optional description (fallback if no PRs)'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  publish:
    name: "Publish to NPM"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout source code"
        uses: actions/checkout@v2

      - name: "Set up Node.js"
        uses: actions/setup-node@v3
        with:
          node-version: 22.x
          registry-url: "https://registry.npmjs.org/"

      - name: "Install dependencies"
        run: npm ci

      - name: "Create build"
        run: npm run build

      - name: "Get current version from package.json"
        id: get_version
        run: echo "version=v$(node -p \"require('./package.json').version\")" >> $GITHUB_OUTPUT

      - name: "Get latest and previous tags"
        id: get_tags
        run: |
          git fetch --tags
          TAGS=$(git tag --sort=-creatordate | head -n 2)
          CURRENT_TAG=$(echo "$TAGS" | sed -n 1p)
          PREV_TAG=$(echo "$TAGS" | sed -n 2p)

          echo "current_tag=$CURRENT_TAG" >> $GITHUB_OUTPUT
          echo "previous_tag=$PREV_TAG" >> $GITHUB_OUTPUT

      - name: "Get merged PRs between tags"
        id: get_prs
        run: |
          prs=$(gh pr list --state merged --search "base:main merged:${{ steps.get_tags.outputs.previous_tag }}..${{ steps.get_tags.outputs.current_tag }}" --json title --jq '.[].title')
          if [[ -z "$prs" ]]; then
            echo "prs_list=No PRs merged in this release." >> $GITHUB_OUTPUT
          else
            list=$(echo "$prs" | sed 's/^/- /')
            echo "prs_list=$list" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Set Git user name and email"
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: "Create Git tag for version"
        run: git tag ${{ steps.get_version.outputs.version }}

      - name: "Push tag to origin"
        run: git push origin ${{ steps.get_version.outputs.version }}

      - name: "Publish to NPM"
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: "Create GitHub Release"
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: ${{ github.event.inputs.release_title }}
          body: |
            ${{ steps.get_prs.outputs.prs_list }}

            ${{ github.event.inputs.release_body }}
            
            Published by ${{ github.actor }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
